/* Generated by the Nim Compiler v1.3.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI1163065 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10866058 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1169053 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11025571 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1788256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1788005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1788091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1788089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1788031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1788378 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1788376 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1788374 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1788035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1788033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1796105 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1169041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169049 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1163045 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1325043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1168808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169086 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1163014 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1163016 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1169081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1169017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169033 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI1169037 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169037.node = NNI1169037;
var NNI1169033 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169033.node = NNI1169033;
var NNI1169019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169019.node = NNI1169019;
NTI1169081.base = NTI1169017;
NTI1169086.base = NTI1169017;
var NNI1169017 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1169081, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1163016, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1163014, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1163014, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1169086, name: "up", sons: null}]};
NTI1169017.node = NNI1169017;
var NNI1168808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1168808.node = NNI1168808;
NTI1169017.base = NTI1168808;
NTI1169019.base = NTI1169017;
NTI1169033.base = NTI1169019;
NTI1169037.base = NTI1169033;
var NNI1325043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}]};
NTI1325043.node = NNI1325043;
var NNI1169049 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169049.node = NNI1169049;
NTI1169049.base = NTI1169019;
var NNI1169041 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169041.node = NNI1169041;
NTI1169041.base = NTI1169019;
NTI1788374.base = NTI1788033;
NTI1788376.base = NTI1788033;
NTI1788378.base = NTI1788033;
var NNI1788031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI1788031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1788031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1788031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1788031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1788031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1788031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1788031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1788031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1788031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1788031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1788031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1788031, name: "NotationNode", len: 0, sons: null}}};
NTI1788031.node = NNI1788031;
var NNI1788091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI1163016, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI1163016, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI1163016, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI1163016, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI1163016, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI1163016, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI1163016, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI1163016, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI1163016, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI1163016, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI1163016, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI1163016, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI1163016, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI1163016, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI1163016, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI1163016, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI1163016, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI1163016, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI1163016, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI1163016, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI1163016, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI1163016, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI1163016, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI1163016, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI1163016, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI1163016, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI1163016, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI1163016, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI1163016, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI1163016, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI1163016, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI1163016, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI1163016, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI1163016, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI1163016, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI1163016, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI1163016, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI1163016, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI1163016, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI1163016, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI1163016, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI1163016, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI1163016, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI1163016, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI1163016, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI1163016, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI1163016, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI1163016, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI1163016, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI1163016, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI1163016, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI1163016, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI1163016, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI1163016, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI1163016, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI1163016, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI1163016, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI1163016, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI1163016, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI1163016, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI1163016, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI1163016, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI1163016, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI1163016, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI1163016, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI1163016, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI1163016, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI1163016, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI1163016, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI1163016, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI1163016, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI1163016, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI1163016, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI1163016, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI1163016, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI1163016, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI1163016, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI1163016, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI1163016, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI1163016, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI1163016, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI1163016, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI1163016, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI1163016, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI1163016, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI1163016, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI1163016, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI1163016, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI1163016, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI1163016, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI1163016, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI1163016, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI1163016, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI1163016, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI1163016, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI1163016, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI1163016, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI1163016, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI1163016, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI1163045, name: "zIndex", sons: null}]};
NTI1788091.node = NNI1788091;
NTI1788091.base = NTI1168808;
NTI1788089.base = NTI1788091;
var NNI1788035 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI1788374, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI1788376, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI1788378, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI1163016, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI1788033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI1788033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI1788033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI1163016, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI1788031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI1163016, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI1788033, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI1788033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI1163016, name: "innerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI1163016, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI1163016, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI1788089, name: "style", sons: null}]};
NTI1788035.node = NNI1788035;
var NNI1788005 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI1788180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI1788184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI1788188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI1788192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI1788196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI1788200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI1788204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI1788208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI1788212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI1788216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI1788220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI1788224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI1788228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI1788232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI1788236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI1788240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI1788244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI1788248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI1788252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI1788256, name: "onunload", sons: null}]};
NTI1788005.node = NNI1788005;
NTI1788005.base = NTI1168808;
NTI1788035.base = NTI1788005;
NTI1788033.base = NTI1788035;
NTI1796105.base = NTI1788033;
NTI11025571.base = NTI1163016;
var NNI1169053 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169053.node = NNI1169053;
NTI1169053.base = NTI1169019;
var NNI10866058 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163045, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163065, name: "Field1", sons: null}]};
NTI10866058.node = NNI10866058;
function makeNimstrLit(c_1390062) {
      var ln = c_1390062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1390062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_1415067, value_1415068, typ_1415069) {
        var result = new Array(len_1415067);
    for (var i = 0; i < len_1415067; ++i) result[i] = nimCopy(null, value_1415068, typ_1415069);
    return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1405023, src_1405024, ti_1405025) {
  var result_1410219 = null;

    switch (ti_1405025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_1400401(ti_1405025))) {
      result_1410219 = src_1405024;
      }
      else {
        result_1410219 = [src_1405024[0], src_1405024[1]];
      }
      
      break;
    case 19:
            if (dest_1405023 === null || dest_1405023 === undefined) {
        dest_1405023 = {};
      }
      else {
        for (var key in dest_1405023) { delete dest_1405023[key]; }
      }
      for (var key in src_1405024) { dest_1405023[key] = src_1405024[key]; }
      result_1410219 = dest_1405023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1405025.base == null))) {
      result_1410219 = nimCopy(dest_1405023, src_1405024, ti_1405025.base);
      }
      else {
      if ((ti_1405025.kind == 17)) {
      result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {m_type: ti_1405025} : dest_1405023;
      }
      else {
        result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {} : dest_1405023;
      }
      }
      nimCopyAux(result_1410219, src_1405024, ti_1405025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1405024 === null) {
        result_1410219 = null;
      }
      else {
        if (dest_1405023 === null || dest_1405023 === undefined) {
          dest_1405023 = new Array(src_1405024.length);
        }
        else {
          dest_1405023.length = src_1405024.length;
        }
        result_1410219 = dest_1405023;
        for (var i = 0; i < src_1405024.length; ++i) {
          result_1410219[i] = nimCopy(result_1410219[i], src_1405024[i], ti_1405025.base);
        }
      }
    
      break;
    case 28:
            if (src_1405024 !== null) {
        result_1410219 = src_1405024.slice(0);
      }
    
      break;
    default: 
      result_1410219 = src_1405024;
      break;
    }

  return result_1410219;

}
function cstrToNimstr(c_1390079) {
      var ln = c_1390079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1390079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1390079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_1390096) {
                    var Tmp5;
            var Tmp7;

  var result_1390097 = null;

    var res_1390170 = new_seq_1390128((s_1390096 != null ? s_1390096.length : 0));
    var i_1390172 = 0;
    var j_1390174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1390172 < (s_1390096 != null ? s_1390096.length : 0))) break L2;
          var c_1390175 = s_1390096[i_1390172];
          if ((c_1390175 < 128)) {
          res_1390170[j_1390174] = String.fromCharCode(c_1390175);
          i_1390172 += 1;
          }
          else {
            var helper_1390198 = new_seq_1390128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1390199 = c_1390175.toString(16);
                  if (((code_1390199 != null ? code_1390199.length : 0) == 1)) {
                  if (helper_1390198 != null) { helper_1390198.push("%0"); } else { helper_1390198 = ["%0"]; };
                  }
                  else {
                  if (helper_1390198 != null) { helper_1390198.push("%"); } else { helper_1390198 = ["%"]; };
                  }
                  
                  if (helper_1390198 != null) { helper_1390198.push(code_1390199); } else { helper_1390198 = [code_1390199]; };
                  i_1390172 += 1;
                    if (((s_1390096 != null ? s_1390096.length : 0) <= i_1390172)) Tmp5 = true; else {                      Tmp5 = (s_1390096[i_1390172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1390175 = s_1390096[i_1390172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1390170[j_1390174] = decodeURIComponent(helper_1390198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1390170[j_1390174] = helper_1390198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1390174 += 1;
        }
    } while(false);
    if (res_1390170 === null) res_1390170 = [];
               if (res_1390170.length < j_1390174) { for (var i=res_1390170.length;i<j_1390174;++i) res_1390170.push(null); }
               else { res_1390170.length = j_1390174; };
    result_1390097 = res_1390170.join("");

  return result_1390097;

}
function raiseException(e_1355218, ename_1355219) {
    e_1355218.name = ename_1355219;
    if ((excHandler == 0)) {
    unhandledException(e_1355218);
    }
    
    e_1355218.trace = nimCopy(null, raw_write_stack_trace_1345059(), NTI1163014);
    throw e_1355218;

  
}
function addInt(a_1395403, b_1395404) {
        var result = a_1395403 + b_1395404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_1415086, a_1415087, b_1415088) {
      var Tmp1;

  var result_1415089 = 0;

  BeforeRet: do {
      if (!(a_1415087 <= i_1415086)) Tmp1 = false; else {        Tmp1 = (i_1415086 <= b_1415088);      }    if (Tmp1) {
    result_1415089 = i_1415086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1415086, a_1415087, b_1415088);
    }
    
  } while (false);

  return result_1415089;

}
function subInt(a_1395421, b_1395422) {
        var result = a_1395421 - b_1395422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr([65, 90]);
function chckRange(i_1420016, a_1420017, b_1420018) {
      var Tmp1;

  var result_1420019 = 0;

  BeforeRet: do {
      if (!(a_1420017 <= i_1420016)) Tmp1 = false; else {        Tmp1 = (i_1420016 <= b_1420018);      }    if (Tmp1) {
    result_1420019 = i_1420016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1420019;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);
function mulInt(a_1395439, b_1395440) {
        var result = a_1395439 * b_1395440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);
var ConstSet9 = setConstr([65, 90], [97, 122]);
function nimMax(a_1395821, b_1395822) {
    var Tmp1;

  var result_1395823 = 0;

  BeforeRet: do {
    if ((b_1395822 <= a_1395821)) {
    Tmp1 = a_1395821;
    }
    else {
    Tmp1 = b_1395822;
    }
    
    result_1395823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1395823;

}
function nimMin(a_1395803, b_1395804) {
    var Tmp1;

  var result_1395805 = 0;

  BeforeRet: do {
    if ((a_1395803 <= b_1395804)) {
    Tmp1 = a_1395803;
    }
    else {
    Tmp1 = b_1395804;
    }
    
    result_1395805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1395805;

}
var nim_program_result = 0;
var global_raise_hook_1307018 = [null];
var local_raise_hook_1307023 = [null];
var out_of_mem_hook_1307026 = [null];
var unhandled_exception_hook_1307031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var alternative_11025319 = [null];
function add_1307042(x_1307045, x_1307045_Idx, y_1307046) {
          if (x_1307045[x_1307045_Idx] === null) { x_1307045[x_1307045_Idx] = []; }
      var off = x_1307045[x_1307045_Idx].length;
      x_1307045[x_1307045_Idx].length += y_1307046.length;
      for (var i = 0; i < y_1307046.length; ++i) {
        x_1307045[x_1307045_Idx][off+i] = y_1307046.charCodeAt(i);
      }
    

  
}
function is_fat_pointer_1400401(ti_1400403) {
  var result_1400404 = false;

  BeforeRet: do {
    result_1400404 = !((ConstSet1[ti_1400403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1400404;

}
function nimCopyAux(dest_1405028, src_1405029, n_1405031) {
    switch (n_1405031.kind) {
    case 0:
      break;
    case 1:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1405031.sons.length; i++) {
      nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i]);
    }
    
      break;
    case 3:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
      for (var i = 0; i < n_1405031.sons.length; ++i) {
        nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i][1]);
      }
    
      break;
    }

  
}
function aux_write_stack_trace_1325038(f_1325040) {
          var Tmp3;

  var result_1325041 = [null];

    var it_1325049 = f_1325040;
    var i_1325051 = 0;
    var total_1325053 = 0;
    var temp_frames_1325060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI1325043);
    L1: do {
        L2: while (true) {
          if (!!((it_1325049 == null))) Tmp3 = false; else {            Tmp3 = (i_1325051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_1325060[i_1325051].Field0 = it_1325049.procname;
          temp_frames_1325060[i_1325051].Field1 = it_1325049.line;
          i_1325051 += 1;
          total_1325053 += 1;
          it_1325049 = it_1325049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_1325049 == null))) break L5;
          total_1325053 += 1;
          it_1325049 = it_1325049.prev;
        }
    } while(false);
    result_1325041[0] = nimCopy(null, [], NTI1163014);
    if (!((total_1325053 == i_1325051))) {
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit("(")); } else { result_1325041[0] = makeNimstrLit("("); };
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(cstrToNimstr(((total_1325053 - i_1325051))+"")); } else { result_1325041[0] = cstrToNimstr(((total_1325053 - i_1325051))+"").slice(); };
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_1325041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_1340236 = 0;
      var colontmp__11025463 = 0;
      colontmp__11025463 = (i_1325051 - 1);
      var res_11025468 = colontmp__11025463;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11025468)) break L8;
            j_1340236 = res_11025468;
            add_1307042(result_1325041, 0, temp_frames_1325060[j_1340236].Field0);
            if ((0 < temp_frames_1325060[j_1340236].Field1)) {
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit(", line: ")); } else { result_1325041[0] = makeNimstrLit(", line: "); };
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(cstrToNimstr((temp_frames_1325060[j_1340236].Field1)+"")); } else { result_1325041[0] = cstrToNimstr((temp_frames_1325060[j_1340236].Field1)+"").slice(); };
            }
            
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit("\x0A")); } else { result_1325041[0] = makeNimstrLit("\x0A"); };
            res_11025468 -= 1;
          }
      } while(false);
    } while(false);

  return result_1325041[0];

}
function raw_write_stack_trace_1345059() {
  var result_1345061 = null;

    if (!((framePtr == null))) {
    result_1345061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_1325038(framePtr) || []), NTI1163014);
    }
    else {
      result_1345061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI1163014);
    }
    

  return result_1345061;

}
function new_seq_1390128(len_1390131) {
  var result_1390133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 644;
    result_1390133 = new Array(len_1390131); for (var i=0;i<len_1390131;++i) {result_1390133[i]=null;}  framePtr = F.prev;

  return result_1390133;

}
function unhandledException(e_1350059) {
    var buf_1350060 = [[]];
    if (!(((e_1350059.message != null ? e_1350059.message.length : 0) == 0))) {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(e_1350059.message); } else { buf_1350060[0] = e_1350059.message.slice(); };
    }
    else {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit(" [")); } else { buf_1350060[0] = makeNimstrLit(" ["); };
    add_1307042(buf_1350060, 0, e_1350059.name);
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_1350060[0] = makeNimstrLit("]\x0A"); };
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(raw_write_stack_trace_1345059()); } else { buf_1350060[0] = raw_write_stack_trace_1345059().slice(); };
    var cbuf_1355201 = toJSStr(buf_1350060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1355201);
  }
  else {
    throw cbuf_1355201;
  }
  

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1169037, name: null, trace: null, up: null}, "OverflowError");

  
}
function is_whitespace_11000101(text_11000103) {
         return !/[^\s]/.test(text_11000103);
  

  
}
function is_whitespace_11000118(x_11000120) {
    var Tmp1;
    var Tmp2;

  var result_11000121 = false;

  var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 134;
    if (!(x_11000120.nodeName == "#text")) Tmp2 = false; else {      Tmp2 = is_whitespace_11000101(x_11000120.textContent);    }    if (Tmp2) Tmp1 = true; else {      Tmp1 = (x_11000120.nodeName == "#comment");    }    result_11000121 = Tmp1;
  framePtr = F.prev;

  return result_11000121;

}
function raiseIndexError(i_1375047, a_1375048, b_1375049) {
    var Tmp1;

    if ((b_1375049 < a_1375048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1375047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1375048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1375049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1163014), parent: null, m_type: NTI1169049, name: null, trace: null, up: null}, "IndexError");

  
}
function to_toc_11000135(x_11000137, father_11000138) {
                var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
      var Tmp15;

  var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if ((x_11000137.nodeName == "UL")) {
    F.line = 139;
    var f_11000159 = {heading: null, kids: [], sortId: (father_11000138.kids != null ? father_11000138.kids.length : 0), doSort: false};
    F.line = 140;
    var i_11000161 = 0;
    L1: do {
      F.line = 141;
        L2: while (true) {
        if (!(i_11000161 < x_11000137.childNodes.length)) break L2;
          F.line = 142;
          var nxt_11000162 = addInt(i_11000161, 1);
          L3: do {
            F.line = 143;
              L4: while (true) {
                if (!(nxt_11000162 < x_11000137.childNodes.length)) Tmp5 = false; else {                  Tmp5 = is_whitespace_11000118(x_11000137.childNodes[nxt_11000162]);                }              if (!Tmp5) break L4;
                F.line = 144;
                nxt_11000162 = addInt(nxt_11000162, 1);
              }
          } while(false);
            if (!(nxt_11000162 < x_11000137.childNodes.length)) Tmp8 = false; else {              Tmp8 = (x_11000137.childNodes[i_11000161].nodeName == "LI");            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (x_11000137.childNodes[i_11000161].childNodes.length == 1);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (x_11000137.childNodes[nxt_11000162].nodeName == "UL");            }          if (Tmp6) {
          F.line = 147;
          var e_11000189 = {heading: x_11000137.childNodes[i_11000161].childNodes[0], kids: [], sortId: (f_11000159.kids != null ? f_11000159.kids.length : 0), doSort: false};
          F.line = 148;
          var it_11000190 = x_11000137.childNodes[nxt_11000162];
          L9: do {
            F.line = 149;
            var j_11000198 = 0;
            F.line = 104;
            var colontmp__11025442 = 0;
            F.line = 149;
            colontmp__11025442 = it_11000190.childNodes.length;
            F.line = 106;
            var i_11025443 = 0;
            L10: do {
              F.line = 107;
                L11: while (true) {
                if (!(i_11025443 < colontmp__11025442)) break L11;
                  F.line = 149;
                  j_11000198 = i_11025443;
                  F.line = 150;
                  to_toc_11000135(it_11000190.childNodes[j_11000198], e_11000189);
                  F.line = 109;
                  i_11025443 = addInt(i_11025443, 1);
                }
            } while(false);
          } while(false);
          F.line = 151;
          if (f_11000159.kids != null) { f_11000159.kids.push(e_11000189); } else { f_11000159.kids = [e_11000189]; };
          F.line = 152;
          i_11000161 = addInt(nxt_11000162, 1);
          }
          else {
            F.line = 154;
            to_toc_11000135(x_11000137.childNodes[i_11000161], f_11000159);
            F.line = 155;
            i_11000161 = addInt(i_11000161, 1);
          }
          
        }
    } while(false);
    F.line = 156;
    if (father_11000138.kids != null) { father_11000138.kids.push(f_11000159); } else { father_11000138.kids = [f_11000159]; };
    }
    else {
    if (is_whitespace_11000118(x_11000137)) {
    }
    else {
    if ((x_11000137.nodeName == "LI")) {
    F.line = 160;
    var idx_11000235 = [];
    L12: do {
      F.line = 161;
      var i_11000243 = 0;
      F.line = 104;
      var colontmp__11025446 = 0;
      F.line = 161;
      colontmp__11025446 = x_11000137.childNodes.length;
      F.line = 106;
      var i_11025447 = 0;
      L13: do {
        F.line = 107;
          L14: while (true) {
          if (!(i_11025447 < colontmp__11025446)) break L14;
            F.line = 161;
            i_11000243 = i_11025447;
            if (!(is_whitespace_11000118(x_11000137.childNodes[i_11000243]))) {
            F.line = 162;
            if (idx_11000235 != null) { idx_11000235.push(i_11000243); } else { idx_11000235 = [i_11000243]; };
            }
            
            F.line = 109;
            i_11025447 = addInt(i_11025447, 1);
          }
      } while(false);
    } while(false);
      if (!((idx_11000235 != null ? idx_11000235.length : 0) == 2)) Tmp15 = false; else {        Tmp15 = (x_11000137.childNodes[idx_11000235[chckIndx(1, 0, (idx_11000235 != null ? idx_11000235.length : 0)+0-1)-0]].nodeName == "UL");      }    if (Tmp15) {
    F.line = 164;
    var e_11000276 = {heading: x_11000137.childNodes[idx_11000235[chckIndx(0, 0, (idx_11000235 != null ? idx_11000235.length : 0)+0-1)-0]], kids: [], sortId: (father_11000138.kids != null ? father_11000138.kids.length : 0), doSort: false};
    F.line = 166;
    var it_11000277 = x_11000137.childNodes[idx_11000235[chckIndx(1, 0, (idx_11000235 != null ? idx_11000235.length : 0)+0-1)-0]];
    L16: do {
      F.line = 167;
      var j_11000285 = 0;
      F.line = 104;
      var colontmp__11025451 = 0;
      F.line = 167;
      colontmp__11025451 = it_11000277.childNodes.length;
      F.line = 106;
      var i_11025452 = 0;
      L17: do {
        F.line = 107;
          L18: while (true) {
          if (!(i_11025452 < colontmp__11025451)) break L18;
            F.line = 167;
            j_11000285 = i_11025452;
            F.line = 168;
            to_toc_11000135(it_11000277.childNodes[j_11000285], e_11000276);
            F.line = 109;
            i_11025452 = addInt(i_11025452, 1);
          }
      } while(false);
    } while(false);
    F.line = 169;
    if (father_11000138.kids != null) { father_11000138.kids.push(e_11000276); } else { father_11000138.kids = [e_11000276]; };
    }
    else {
      L19: do {
        F.line = 171;
        var i_11000300 = 0;
        F.line = 104;
        var colontmp__11025455 = 0;
        F.line = 171;
        colontmp__11025455 = x_11000137.childNodes.length;
        F.line = 106;
        var i_11025456 = 0;
        L20: do {
          F.line = 107;
            L21: while (true) {
            if (!(i_11025456 < colontmp__11025455)) break L21;
              F.line = 171;
              i_11000300 = i_11025456;
              F.line = 172;
              to_toc_11000135(x_11000137.childNodes[i_11000300], father_11000138);
              F.line = 109;
              i_11025456 = addInt(i_11025456, 1);
            }
        } while(false);
      } while(false);
    }
    
    }
    else {
      F.line = 174;
    if (father_11000138.kids != null) { father_11000138.kids.push({heading: x_11000137, kids: [], sortId: (father_11000138.kids != null ? father_11000138.kids.length : 0), doSort: false}); } else { father_11000138.kids = [{heading: x_11000137, kids: [], sortId: (father_11000138.kids != null ? father_11000138.kids.length : 0), doSort: false}]; };
    }
    }}
  framePtr = F.prev;

  
}
function extract_items_10955074(x_10955076, heading_10955077, items_10955080, items_10955080_Idx) {
      var Tmp1;

  var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_10955076 == null)) {
    F.line = 81;
    break BeforeRet;
    }
    
      if (!!((x_10955076.heading == null))) Tmp1 = false; else {        Tmp1 = (x_10955076.heading.textContent == heading_10955077);      }    if (Tmp1) {
    L2: do {
      F.line = 83;
      var i_10960021 = 0;
      F.line = 104;
      var colontmp__11025485 = 0;
      F.line = 83;
      colontmp__11025485 = (x_10955076.kids != null ? x_10955076.kids.length : 0);
      F.line = 106;
      var i_11025486 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_11025486 < colontmp__11025485)) break L4;
            F.line = 83;
            i_10960021 = i_11025486;
            F.line = 84;
            if (items_10955080[items_10955080_Idx] != null) { items_10955080[items_10955080_Idx].push(x_10955076.kids[chckIndx(i_10960021, 0, (x_10955076.kids != null ? x_10955076.kids.length : 0)+0-1)-0].heading); } else { items_10955080[items_10955080_Idx] = [x_10955076.kids[chckIndx(i_10960021, 0, (x_10955076.kids != null ? x_10955076.kids.length : 0)+0-1)-0].heading]; };
            F.line = 109;
            i_11025486 = addInt(i_11025486, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      L5: do {
        F.line = 86;
        var i_10960041 = 0;
        F.line = 104;
        var colontmp__11025489 = 0;
        F.line = 86;
        colontmp__11025489 = (x_10955076.kids != null ? x_10955076.kids.length : 0);
        F.line = 106;
        var i_11025490 = 0;
        L6: do {
          F.line = 107;
            L7: while (true) {
            if (!(i_11025490 < colontmp__11025489)) break L7;
              F.line = 86;
              i_10960041 = i_11025490;
              F.line = 87;
              var it_10960042 = x_10955076.kids[chckIndx(i_10960041, 0, (x_10955076.kids != null ? x_10955076.kids.length : 0)+0-1)-0];
              F.line = 88;
              extract_items_10955074(it_10960042, heading_10955077, items_10955080, items_10955080_Idx);
              F.line = 109;
              i_11025490 = addInt(i_11025490, 1);
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function tree_10946020(tag_10946022, kids_10946024) {
  var result_10946025 = null;

  var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_10946025 = document.createElement(toJSStr(tag_10946022));
    L1: do {
      F.line = 12;
      var k_10946056 = null;
      F.line = 3;
      var i_11025506 = 0;
      L2: do {
        F.line = 4;
          L3: while (true) {
          if (!(i_11025506 < (kids_10946024 != null ? kids_10946024.length : 0))) break L3;
            F.line = 12;
            k_10946056 = kids_10946024[chckIndx(i_11025506, 0, (kids_10946024 != null ? kids_10946024.length : 0)+0-1)-0];
            F.line = 13;
            result_10946025.appendChild(k_10946056);
            F.line = 6;
            i_11025506 = addInt(i_11025506, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10946025;

}
function text_10946152(s_10946154) {
  var result_10946155 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10946155 = document.createTextNode(s_10946154);
  framePtr = F.prev;

  return result_10946155;

}
function sys_fatal_1267618(message_1267622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_1267622, NTI1163014), m_type: NTI1169041, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_1267614(msg_1267616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_1267618(msg_1267616);
  framePtr = F.prev;

  
}
function failed_assert_impl_1267680(msg_1267682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_1267614(msg_1267682);
  framePtr = F.prev;

  
}
function uncovered_11005022(x_11005024) {
      var Tmp1;
    var Tmp2;

  var result_11005025 = null;

  var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!((x_11005024.kids != null ? x_11005024.kids.length : 0) == 0)) Tmp1 = false; else {        Tmp1 = !((x_11005024.heading == null));      }    if (Tmp1) {
    F.line = 194;
    if (!(x_11005024.heading.hasOwnProperty('__karaxMarker__'))) {
    Tmp2 = x_11005024;
    }
    else {
    Tmp2 = null;
    }
    
    result_11005025 = Tmp2;
    break BeforeRet;
    }
    
    F.line = 195;
    result_11005025 = {heading: x_11005024.heading, kids: [], sortId: x_11005024.sortId, doSort: x_11005024.doSort};
    L3: do {
      F.line = 197;
      var i_11010036 = 0;
      F.line = 104;
      var colontmp__11025517 = 0;
      F.line = 197;
      colontmp__11025517 = (x_11005024.kids != null ? x_11005024.kids.length : 0);
      F.line = 106;
      var i_11025518 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_11025518 < colontmp__11025517)) break L5;
            F.line = 197;
            i_11010036 = i_11025518;
            F.line = 198;
            var y_11010037 = uncovered_11005022(x_11005024.kids[chckIndx(i_11010036, 0, (x_11005024.kids != null ? x_11005024.kids.length : 0)+0-1)-0]);
            if (!((y_11010037 == null))) {
            F.line = 199;
            if (result_11005025.kids != null) { result_11005025.kids.push(y_11010037); } else { result_11005025.kids = [y_11010037]; };
            }
            
            F.line = 109;
            i_11025518 = addInt(i_11025518, 1);
          }
      } while(false);
    } while(false);
    if (((result_11005025.kids != null ? result_11005025.kids.length : 0) == 0)) {
    F.line = 200;
    result_11005025 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_11005025;

}
function merge_tocs_11015034(orig_11015036, news_11015037) {
  var result_11015038 = null;

  var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 203;
    result_11015038 = uncovered_11005022(orig_11015036);
    if ((result_11015038 == null)) {
    F.line = 205;
    result_11015038 = news_11015037;
    }
    else {
      L1: do {
        F.line = 207;
        var i_11015059 = 0;
        F.line = 104;
        var colontmp__11025512 = 0;
        F.line = 207;
        colontmp__11025512 = (news_11015037.kids != null ? news_11015037.kids.length : 0);
        F.line = 106;
        var i_11025513 = 0;
        L2: do {
          F.line = 107;
            L3: while (true) {
            if (!(i_11025513 < colontmp__11025512)) break L3;
              F.line = 207;
              i_11015059 = i_11025513;
              F.line = 208;
              if (result_11015038.kids != null) { result_11015038.kids.push(news_11015037.kids[chckIndx(i_11015059, 0, (news_11015037.kids != null ? news_11015037.kids.length : 0)+0-1)-0]); } else { result_11015038.kids = [news_11015037.kids[chckIndx(i_11015059, 0, (news_11015037.kids != null ? news_11015037.kids.length : 0)+0-1)-0]]; };
              F.line = 109;
              i_11025513 = addInt(i_11025513, 1);
            }
        } while(false);
      } while(false);
    }
    
  framePtr = F.prev;

  return result_11015038;

}
function build_toc_11015080(orig_11015082, types_11015084, procs_11015085) {
                      var Tmp7;

  var result_11015086 = null;

  var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 211;
    var new_stuff_11015102 = {heading: null, kids: [], doSort: true, sortId: 0};
    L1: do {
      F.line = 212;
      var t_11025214 = null;
      F.line = 184;
      var i_11025501 = 0;
      F.line = 185;
      var l_11025502 = (types_11015084 != null ? types_11015084.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11025501 < l_11025502)) break L3;
            F.line = 212;
            t_11025214 = types_11015084[chckIndx(i_11025501, 0, (types_11015084 != null ? types_11015084.length : 0)+0-1)-0];
            F.line = 213;
            var c_11025230 = {heading: t_11025214.cloneNode(true), kids: [], doSort: true, sortId: 0};
            F.line = 214;
            t_11025214.__karaxMarker__ = true;
            L4: do {
              F.line = 215;
              var p_11025237 = null;
              F.line = 184;
              var i_11025498 = 0;
              F.line = 185;
              var l_11025499 = (procs_11015085 != null ? procs_11015085.length : 0);
              L5: do {
                F.line = 186;
                  L6: while (true) {
                  if (!(i_11025498 < l_11025499)) break L6;
                    F.line = 215;
                    p_11025237 = procs_11015085[chckIndx(i_11025498, 0, (procs_11015085 != null ? procs_11015085.length : 0)+0-1)-0];
                    if (!(p_11025237.hasOwnProperty('__karaxMarker__'))) {
                    F.line = 217;
                    var xx_11025238 = p_11025237.parentNode.getElementsByClassName("attachedType");
                      if (!((xx_11025238 != null ? xx_11025238.length : 0) == 1)) Tmp7 = false; else {                        Tmp7 = (xx_11025238[chckIndx(0, 0, (xx_11025238 != null ? xx_11025238.length : 0)+0-1)-0].textContent == t_11025214.textContent);                      }                    if (Tmp7) {
                    F.line = 220;
                    var q_11025246 = tree_10946020(makeNimstrLit("A"), [text_10946152(p_11025237.title)]);
                    F.line = 221;
                    q_11025246.setAttribute("href", p_11025237.getAttribute("href"));
                    F.line = 222;
                    if (c_11025230.kids != null) { c_11025230.kids.push({heading: q_11025246, kids: [], sortId: 0, doSort: false}); } else { c_11025230.kids = [{heading: q_11025246, kids: [], sortId: 0, doSort: false}]; };
                    F.line = 223;
                    p_11025237.__karaxMarker__ = true;
                    }
                    
                    }
                    
                    F.line = 188;
                    i_11025498 = addInt(i_11025498, 1);
                    if (!(((procs_11015085 != null ? procs_11015085.length : 0) == l_11025499))) {
                    F.line = 189;
                    failed_assert_impl_1267680(makeNimstrLit("/home/runner/work/Nim/Nim/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            F.line = 224;
            if (new_stuff_11015102.kids != null) { new_stuff_11015102.kids.push(c_11025230); } else { new_stuff_11015102.kids = [c_11025230]; };
            F.line = 188;
            i_11025501 = addInt(i_11025501, 1);
            if (!(((types_11015084 != null ? types_11015084.length : 0) == l_11025502))) {
            F.line = 189;
            failed_assert_impl_1267680(makeNimstrLit("/home/runner/work/Nim/Nim/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 225;
    result_11015086 = merge_tocs_11015034(orig_11015082, new_stuff_11015102);
  framePtr = F.prev;

  return result_11015086;

}
function add_10946100(parent_10946102, kid_10946103) {
      var Tmp1;
        var Tmp2;

  var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
      if (!(parent_10946102.nodeName == "TR")) Tmp1 = false; else {        if ((kid_10946103.nodeName == "TD")) Tmp2 = true; else {          Tmp2 = (kid_10946103.nodeName == "TH");        }        Tmp1 = Tmp2;      }    if (Tmp1) {
    F.line = 18;
    var k_10946104 = document.createElement("TD");
    F.line = 19;
    k_10946104.appendChild(kid_10946103);
    F.line = 20;
    parent_10946102.appendChild(k_10946104);
    }
    else {
      F.line = 22;
    parent_10946102.appendChild(kid_10946103);
    }
    
  framePtr = F.prev;

  
}
function set_class_10946118(e_10946120, value_10946121) {
  var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 25;
    e_10946120.setAttribute("class", toJSStr(value_10946121));
  framePtr = F.prev;

  
}
function to_html_10960071(x_10960073, is_root_10960074) {
      var Tmp1;
    function HEX3Aanonymous_10965015(a_10965017, b_10965018) {
          var Tmp1;

      var result_10965019 = 0;

      var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
      BeforeRet: do {
          if (!!((a_10965017.heading == null))) Tmp1 = false; else {            Tmp1 = !((b_10965018.heading == null));          }        if (Tmp1) {
        F.line = 106;
        var x_10975009 = a_10965017.heading.textContent;
        F.line = 107;
        var y_10975010 = b_10965018.heading.textContent;
        if ((x_10975009 < y_10975010)) {
        F.line = 108;
        result_10965019 = -1;
        break BeforeRet;
        }
        
        if ((y_10975010 < x_10975009)) {
        F.line = 109;
        result_10965019 = 1;
        break BeforeRet;
        }
        
        F.line = 110;
        result_10965019 = 0;
        break BeforeRet;
        }
        else {
          F.line = 113;
          result_10965019 = subInt(a_10965017.sortId, b_10965018.sortId);
          break BeforeRet;
        }
        
      } while (false);
      framePtr = F.prev;

      return result_10965019;

    }

  var result_10960075 = null;

  var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_10960073 == null)) {
    F.line = 91;
    result_10960075 = null;
    break BeforeRet;
    }
    
    if (((x_10960073.kids != null ? x_10960073.kids.length : 0) == 0)) {
    if ((x_10960073.heading == null)) {
    F.line = 93;
    result_10960075 = null;
    break BeforeRet;
    }
    
    F.line = 94;
    result_10960075 = x_10960073.heading.cloneNode(true);
    break BeforeRet;
    }
    
    F.line = 95;
    result_10960075 = tree_10946020(makeNimstrLit("DIV"), []);
      if (!!((x_10960073.heading == null))) Tmp1 = false; else {        Tmp1 = !(x_10960073.heading.hasOwnProperty('__karaxMarker__'));      }    if (Tmp1) {
    F.line = 97;
    add_10946100(result_10960075, x_10960073.heading.cloneNode(true));
    }
    
    F.line = 98;
    var ul_10965012 = tree_10946020(makeNimstrLit("UL"), []);
    if (is_root_10960074) {
    F.line = 100;
    set_class_10946118(ul_10965012, makeNimstrLit("simple simple-toc"));
    }
    else {
      F.line = 102;
    set_class_10946118(ul_10965012, makeNimstrLit("simple"));
    }
    
    if (x_10960073.doSort) {
    F.line = 104;
    x_10960073.kids.sort(HEX3Aanonymous_10965015);
    }
    
    L2: do {
      F.line = 115;
      var k_10990214 = null;
      F.line = 184;
      var i_11025524 = 0;
      F.line = 185;
      var l_11025525 = (x_10960073.kids != null ? x_10960073.kids.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_11025524 < l_11025525)) break L4;
            F.line = 115;
            k_10990214 = x_10960073.kids[chckIndx(i_11025524, 0, (x_10960073.kids != null ? x_10960073.kids.length : 0)+0-1)-0];
            F.line = 116;
            var y_10990215 = to_html_10960071(k_10990214, false);
            if (!((y_10990215 == null))) {
            F.line = 118;
            add_10946100(ul_10965012, tree_10946020(makeNimstrLit("LI"), [y_10990215]));
            }
            
            F.line = 188;
            i_11025524 = addInt(i_11025524, 1);
            if (!(((x_10960073.kids != null ? x_10960073.kids.length : 0) == l_11025525))) {
            F.line = 189;
            failed_assert_impl_1267680(makeNimstrLit("/home/runner/work/Nim/Nim/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if (!((ul_10965012.childNodes.length == 0))) {
    F.line = 119;
    add_10946100(result_10960075, ul_10965012);
    }
    
    if ((result_10960075.childNodes.length == 0)) {
    F.line = 120;
    result_10960075 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10960075;

}
function replace_by_id_10946172(id_10946174, new_tree_10946175) {
  var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 32;
    var x_10946176 = document.getElementById(id_10946174);
    F.line = 33;
    x_10946176.parentNode.replaceChild(new_tree_10946175, x_10946176);
    F.line = 34;
    new_tree_10946175.id = id_10946174;
  framePtr = F.prev;

  
}
function togglevis_11025333(d_11025335) {
  var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 230;
        if (d_11025335.style.display == 'none')
      d_11025335.style.display = 'inline';
    else
      d_11025335.style.display = 'none';
  
  framePtr = F.prev;

  
}
function groupBy(value_11025351) {
  var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 238;
    var toc_11025352 = document.getElementById("toc-list");
    if ((alternative_11025319[0] == null)) {
    F.line = 240;
    var tt_11025373 = {heading: null, kids: [], sortId: 0, doSort: false};
    F.line = 241;
    to_toc_11000135(toc_11025352, tt_11025373);
    F.line = 242;
    tt_11025373 = tt_11025373.kids[chckIndx(0, 0, (tt_11025373.kids != null ? tt_11025373.kids.length : 0)+0-1)-0];
    F.line = 244;
    var types_11025390 = [[]];
    F.line = 245;
    var procs_11025407 = [[]];
    F.line = 247;
    extract_items_10955074(tt_11025373, "Types", types_11025390, 0);
    F.line = 248;
    extract_items_10955074(tt_11025373, "Procs", procs_11025407, 0);
    F.line = 249;
    extract_items_10955074(tt_11025373, "Converters", procs_11025407, 0);
    F.line = 250;
    extract_items_10955074(tt_11025373, "Methods", procs_11025407, 0);
    F.line = 251;
    extract_items_10955074(tt_11025373, "Templates", procs_11025407, 0);
    F.line = 252;
    extract_items_10955074(tt_11025373, "Macros", procs_11025407, 0);
    F.line = 253;
    extract_items_10955074(tt_11025373, "Iterators", procs_11025407, 0);
    F.line = 255;
    var ntoc_11025415 = build_toc_11015080(tt_11025373, types_11025390[0], procs_11025407[0]);
    F.line = 256;
    var x_11025416 = to_html_10960071(ntoc_11025415, true);
    F.line = 257;
    alternative_11025319[0] = tree_10946020(makeNimstrLit("DIV"), [x_11025416]);
    }
    
    if ((value_11025351 == "type")) {
    F.line = 259;
    replace_by_id_10946172("tocRoot", alternative_11025319[0]);
    }
    else {
      F.line = 261;
    replace_by_id_10946172("tocRoot", tree_10946020(makeNimstrLit("DIV"), []));
    }
    
    F.line = 262;
    togglevis_11025333(document.getElementById("toc-list"));
  framePtr = F.prev;

  
}
var db_11025528 = [null];
var contents_11025530 = [null];
var oldtoc_11035403 = [null];
var timer_11035404 = [null];
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1169053, name: null, trace: null, up: null}, "RangeError");

  
}
function nsuToLowerAsciiChar(c_9915023) {
  var result_9915024 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet2[c_9915023] != undefined)) {
    F.line = 209;
    result_9915024 = chckRange(addInt(c_9915023, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_9915024 = c_9915023;
    }
    
  framePtr = F.prev;

  return result_9915024;

}
function fuzzy_match_10866054(pattern_10866056, str_10866057) {
              var Tmp4;
              var Tmp5;
                var Tmp6;
      var Tmp7;
        var Tmp8;

  var result_10866061 = {Field0: 0, Field1: false};

  var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
  framePtr = F;
    F.line = 36;
    var score_state_10866062 = -100;
    F.line = 37;
    var header_matched_10866063 = false;
    F.line = 38;
    var unmatched_leading_char_count_10866065 = 0;
    F.line = 39;
    var consecutive_match_count_10866067 = 0;
    F.line = 40;
    var str_index_10866069 = 0;
    F.line = 41;
    var pat_index_10866071 = 0;
    F.line = 42;
    var score_10866073 = 0;
    L1: do {
      F.line = 48;
        L2: while (true) {
        if (!((str_index_10866069 < (str_10866057 != null ? str_10866057.length : 0)) && (pat_index_10866071 < (pattern_10866056 != null ? pattern_10866056.length : 0)))) break L2;
          L3: do {
            F.line = 50;
            var pattern_char_10866079 = nsuToLowerAsciiChar(pattern_10866056.charCodeAt(chckIndx(pat_index_10866071, 0, (pattern_10866056 != null ? pattern_10866056.length : 0)+0-1)-0));
            F.line = 51;
            var str_char_10866080 = nsuToLowerAsciiChar(str_10866057.charCodeAt(chckIndx(str_index_10866069, 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0));
            if ((ConstSet3[pattern_char_10866079] != undefined)) {
            F.line = 55;
            pat_index_10866071 = addInt(pat_index_10866071, 1);
            F.line = 56;
            break L3;
            }
            
            if ((ConstSet4[str_char_10866080] != undefined)) {
            F.line = 58;
            str_index_10866069 = addInt(str_index_10866069, 1);
            F.line = 59;
            break L3;
            }
            
            if ((!(header_matched_10866063) && (str_char_10866080 == 58))) {
            F.line = 64;
            header_matched_10866063 = true;
            F.line = 65;
            score_state_10866062 = -100;
            F.line = 66;
            score_10866073 = ((Math.floor((5.0000000000000000e-01 * score_10866073)))|0);
            F.line = 67;
            pat_index_10866071 = 0;
            F.line = 68;
            str_index_10866069 = addInt(str_index_10866069, 1);
            F.line = 69;
            break L3;
            }
            
            if ((str_char_10866080 == pattern_char_10866079)) {
            F.line = 72;
            switch (score_state_10866062) {
            case -100:
            case 20:
              F.line = 74;
              score_state_10866062 = 10;
              break;
            case 0:
              F.line = 77;
              score_state_10866062 = 5;
              F.line = 77;
              score_10866073 = addInt(score_10866073, score_state_10866062);
              break;
            case 10:
            case 5:
              F.line = 80;
              consecutive_match_count_10866067 = addInt(consecutive_match_count_10866067, 1);
              F.line = 81;
              score_state_10866062 = 5;
              F.line = 82;
              score_10866073 = addInt(score_10866073, mulInt(5, consecutive_match_count_10866067));
              if ((score_state_10866062 == 10)) {
              F.line = 85;
              score_10866073 = addInt(score_10866073, 10);
              }
              
              F.line = 87;
              var on_boundary_10880042 = (pat_index_10866071 == (pattern_10866056 != null ? (pattern_10866056.length-1) : -1));
              if ((!(on_boundary_10880042) && (str_index_10866069 < (str_10866057 != null ? (str_10866057.length-1) : -1)))) {
              F.line = 90;
              var next_pattern_char_10880043 = nsuToLowerAsciiChar(pattern_10866056.charCodeAt(chckIndx(addInt(pat_index_10866071, 1), 0, (pattern_10866056 != null ? pattern_10866056.length : 0)+0-1)-0));
              F.line = 91;
              var next_str_char_10880044 = nsuToLowerAsciiChar(str_10866057.charCodeAt(chckIndx(addInt(str_index_10866069, 1), 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0));
              F.line = 94;
              if (!!((ConstSet5[next_str_char_10880044] != undefined))) Tmp4 = false; else {                Tmp4 = !((next_str_char_10880044 == next_pattern_char_10880043));              }              on_boundary_10880042 = Tmp4;
              }
              
              if (on_boundary_10880042) {
              F.line = 99;
              score_state_10866062 = 20;
              F.line = 99;
              score_10866073 = addInt(score_10866073, score_state_10866062);
              }
              
              break;
            case -1:
            case -3:
              F.line = 102;
              if (!((ConstSet6[str_10866057.charCodeAt(chckIndx(subInt(str_index_10866069, 1), 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0)] != undefined))) Tmp5 = true; else {                if (!(ConstSet7[str_10866057.charCodeAt(chckIndx(subInt(str_index_10866069, 1), 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0)] != undefined)) Tmp6 = false; else {                  Tmp6 = (ConstSet8[str_10866057.charCodeAt(chckIndx(str_index_10866069, 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0)] != undefined);                }                Tmp5 = Tmp6;              }              var is_leading_char_10910008 = Tmp5;
              if (is_leading_char_10910008) {
              F.line = 109;
              score_state_10866062 = 10;
              }
              else {
                F.line = 113;
                score_state_10866062 = 0;
                F.line = 113;
                score_10866073 = addInt(score_10866073, score_state_10866062);
              }
              
              break;
            }
            F.line = 114;
            pat_index_10866071 = addInt(pat_index_10866071, 1);
            }
            else {
              F.line = 117;
              switch (score_state_10866062) {
              case -100:
                F.line = 119;
                score_state_10866062 = -3;
                F.line = 119;
                score_10866073 = addInt(score_10866073, score_state_10866062);
                break;
              case 5:
                F.line = 122;
                score_state_10866062 = -1;
                F.line = 122;
                score_10866073 = addInt(score_10866073, score_state_10866062);
                F.line = 123;
                consecutive_match_count_10866067 = 0;
                break;
              case -3:
                if ((unmatched_leading_char_count_10866065 < 3)) {
                F.line = 127;
                score_state_10866062 = -3;
                F.line = 127;
                score_10866073 = addInt(score_10866073, score_state_10866062);
                }
                
                F.line = 128;
                unmatched_leading_char_count_10866065 = addInt(unmatched_leading_char_count_10866065, 1);
                break;
              default: 
                F.line = 131;
                score_state_10866062 = -1;
                F.line = 131;
                score_10866073 = addInt(score_10866073, score_state_10866062);
                break;
              }
            }
            
            F.line = 133;
            str_index_10866069 = addInt(str_index_10866069, 1);
          } while(false);
        }
    } while(false);
      if (!(pat_index_10866071 == (pattern_10866056 != null ? pattern_10866056.length : 0))) Tmp7 = false; else {        if ((str_index_10866069 == (str_10866057 != null ? str_10866057.length : 0))) Tmp8 = true; else {          Tmp8 = !((ConstSet9[str_10866057.charCodeAt(chckIndx(str_index_10866069, 0, (str_10866057 != null ? str_10866057.length : 0)+0-1)-0)] != undefined));        }        Tmp7 = Tmp8;      }    if (Tmp7) {
    F.line = 136;
    score_10866073 = addInt(score_10866073, 10);
    }
    
    F.line = 139;
    var colontmp__11045060 = nimMax(0, score_10866073);
    F.line = 140;
    var colontmp__11045061 = (0 < score_10866073);
    F.line = 138;
    nimCopy(result_10866061, {Field0: colontmp__11045060, Field1: colontmp__11045061}, NTI10866058);
  framePtr = F.prev;

  return result_10866061;

}
function text_10946135(s_10946137) {
  var result_10946138 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 26;
    result_10946138 = document.createTextNode(toJSStr(s_10946137));
  framePtr = F.prev;

  return result_10946138;

}
function dosearch_11025547(value_11025549) {
    function HEX3Aanonymous_11035273(a_11035282, b_11035283) {
      var result_11035287 = 0;

      var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 305;
        result_11035287 = subInt(b_11035283["Field1"], a_11035282["Field1"]);
      framePtr = F.prev;

      return result_11035287;

    }

  var result_11025550 = null;

  var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (((db_11025528[0] != null ? db_11025528[0].length : 0) == 0)) {
    F.line = 272;
    var stuff_11025556 = null;
    F.line = 273;
        var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_11025556 = doc.documentElement;
    
    F.line = 286;
    db_11025528[0] = nimCopy(null, stuff_11025556.getElementsByClassName("reference"), NTI1796105);
    F.line = 287;
    contents_11025530[0] = nimCopy(null, [], NTI11025571);
    L1: do {
      F.line = 288;
      var ahref_11035214 = null;
      F.line = 184;
      var i_11045040 = 0;
      F.line = 185;
      var l_11045041 = (db_11025528[0] != null ? db_11025528[0].length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11045040 < l_11045041)) break L3;
            F.line = 288;
            ahref_11035214 = db_11025528[0][chckIndx(i_11045040, 0, (db_11025528[0] != null ? db_11025528[0].length : 0)+0-1)-0];
            F.line = 289;
            if (contents_11025530[0] != null) { contents_11025530[0].push(ahref_11035214.getAttribute("data-doc-search-tag")); } else { contents_11025530[0] = [ahref_11035214.getAttribute("data-doc-search-tag")]; };
            F.line = 188;
            i_11045040 = addInt(i_11045040, 1);
            if (!(((db_11025528[0] != null ? db_11025528[0].length : 0) == l_11045041))) {
            F.line = 189;
            failed_assert_impl_1267680(makeNimstrLit("/home/runner/work/Nim/Nim/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    F.line = 290;
    var ul_11035225 = tree_10946020(makeNimstrLit("UL"), []);
    F.line = 291;
    result_11025550 = tree_10946020(makeNimstrLit("DIV"), []);
    F.line = 292;
    set_class_10946118(result_11025550, makeNimstrLit("search_results"));
    F.line = 293;
    var matches_11035246 = [];
    L4: do {
      F.line = 294;
      var i_11035259 = 0;
      F.line = 104;
      var colontmp__11045047 = 0;
      F.line = 294;
      colontmp__11045047 = (db_11025528[0] != null ? db_11025528[0].length : 0);
      F.line = 106;
      var i_11045048 = 0;
      L5: do {
        F.line = 107;
          L6: while (true) {
          if (!(i_11045048 < colontmp__11045047)) break L6;
            F.line = 294;
            i_11035259 = i_11045048;
            L7: do {
              F.line = 295;
              var c_11035260 = contents_11025530[0][chckIndx(i_11035259, 0, (contents_11025530[0] != null ? contents_11025530[0].length : 0)+0-1)-0];
              if (((c_11035260 == "Examples") || (c_11035260 == "PEG construction"))) {
              F.line = 300;
              break L7;
              }
              
              F.line = 301;
              var colontmp__11045055 = fuzzy_match_10866054(value_11025549, c_11035260);
              F.line = 301;
              var score_11035261 = colontmp__11045055["Field0"];
              F.line = 301;
              var matched_11035262 = colontmp__11045055["Field1"];
              if (matched_11035262) {
              F.line = 303;
              if (matches_11035246 != null) { matches_11035246.push({Field0: db_11025528[0][chckIndx(i_11035259, 0, (db_11025528[0] != null ? db_11025528[0].length : 0)+0-1)-0], Field1: score_11035261}); } else { matches_11035246 = [{Field0: db_11025528[0][chckIndx(i_11035259, 0, (db_11025528[0] != null ? db_11025528[0].length : 0)+0-1)-0], Field1: score_11035261}]; };
              }
              
            } while(false);
            F.line = 109;
            i_11045048 = addInt(i_11045048, 1);
          }
      } while(false);
    } while(false);
    F.line = 305;
    matches_11035246.sort(HEX3Aanonymous_11035273);
    L8: do {
      F.line = 306;
      var i_11035326 = 0;
      F.line = 104;
      var colontmp__11045052 = 0;
      F.line = 306;
      colontmp__11045052 = nimMin((matches_11035246 != null ? matches_11035246.length : 0), 29);
      F.line = 106;
      var i_11045053 = 0;
      L9: do {
        F.line = 107;
          L10: while (true) {
          if (!(i_11045053 < colontmp__11045052)) break L10;
            F.line = 306;
            i_11035326 = i_11045053;
            F.line = 307;
            matches_11035246[chckIndx(i_11035326, 0, (matches_11035246 != null ? matches_11035246.length : 0)+0-1)-0]["Field0"].innerHTML = matches_11035246[chckIndx(i_11035326, 0, (matches_11035246 != null ? matches_11035246.length : 0)+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
            F.line = 308;
            add_10946100(ul_11035225, tree_10946020(makeNimstrLit("LI"), [matches_11035246[chckIndx(i_11035326, 0, (matches_11035246 != null ? matches_11035246.length : 0)+0-1)-0]["Field0"]]));
            F.line = 109;
            i_11045053 = addInt(i_11045053, 1);
          }
      } while(false);
    } while(false);
    if ((ul_11035225.childNodes.length == 0)) {
    F.line = 310;
    add_10946100(result_11025550, tree_10946020(makeNimstrLit("B"), [text_10946135(makeNimstrLit("no search results"))]));
    }
    else {
      F.line = 312;
      add_10946100(result_11025550, tree_10946020(makeNimstrLit("B"), [text_10946135(makeNimstrLit("search results"))]));
      F.line = 313;
      add_10946100(result_11025550, ul_11035225);
    }
    
  framePtr = F.prev;

  return result_11025550;

}
function search() {
    function wrapper_11035435() {
      var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 320;
        var elem_11035437 = document.getElementById("searchInput");
        F.line = 321;
        var value_11035438 = elem_11035437.value;
        if (!(((value_11035438 != null ? value_11035438.length : 0) == 0))) {
        if ((oldtoc_11035403[0] == null)) {
        F.line = 324;
        oldtoc_11035403[0] = document.getElementById("tocRoot");
        }
        
        F.line = 325;
        var results_11040006 = dosearch_11025547(value_11035438);
        F.line = 326;
        replace_by_id_10946172("tocRoot", results_11040006);
        }
        else {
        if (!((oldtoc_11035403[0] == null))) {
        F.line = 328;
        replace_by_id_10946172("tocRoot", oldtoc_11035403[0]);
        }
        }
      framePtr = F.prev;

      
    }

  var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (!((timer_11035404[0] == null))) {
    F.line = 330;
    clearTimeout(timer_11035404[0]);
    }
    
    F.line = 331;
    timer_11035404[0] = setTimeout(wrapper_11035435, 400);
  framePtr = F.prev;

  
}
